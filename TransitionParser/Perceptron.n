#pragma indent
using System
using System.Collections.Generic
using System.Linq
using System.Data
using Nemerle.Imperative
using Haplon.Numerics

namespace Haplon.NLP.Transition
     
    public class Perceptron[S, A] where S: AbsState[S, A]
        type Node = StateNode[S, A]
        Data: array[S * S] // (input, output)
        Decoder: BreadthFirst[S, A]
        WeightVec: array[double] = array(AbsState.FeatCount)
        AvgWeightVec: array[double] = array(AbsState.FeatCount)
        Step: int { get; set }
        
        public this(data: IEnumerable[S * S], beamSize: int)
            Data = data.ToArray()
            Decoder = BreadthFirst(WeightVec, beamSize)
            Step = 1
            
        public Train(): void
            Data.Shuffle()
            for (mutable i = 0; i < Data.Length; i++)
                PrintLog(i + 1)
                def (input, output) = Data[i]
                def pred = Decoder.Search(input, st => st.ValidActs())
                def correct = Decoder.Search(input, st => st.ReachableActs(output))
                (pred, correct) |> MaxUpdate
                Step++
                
        public Average(): array[double]
            def vec = array(WeightVec.Length)
            for (mutable i = 0; i < vec.Length; i++) vec[i] = WeightVec[i] - AvgWeightVec[i] / Step
            vec
                
        MaxUpdate(pred: Node, correct: Node): void
            def (preds, corrects) = (pred.Forward.ToArray(), correct.Forward.ToArray())
            assert(preds.Length == corrects.Length)
            
            mutable (max, k) = (double.MinValue, -1)
            for (mutable i = 0; i < preds.Length; i++)
                def diff = preds[i].Score - corrects[i].Score
                when (diff >= max) (max, k) = (diff, i)
                
            Update(preds[k], -1.0)
            Update(corrects[k], 1.0)
            
        PrintLog(i: int): void
            def interval = Data.Length / 10
            when (i % interval == 0)
                Console.Write($"$(i / interval)")
            when (i == Data.Length) Console.WriteLine("")
            
        Update(node: Node, value: double): void
            foreach (n in node.Backward)
                when (n.Prev == null) continue
                foreach (id in n.Prev.St.GetFeatIds(n.LastAct))
                    checked
                        WeightVec[id] += value
                        AvgWeightVec[id] += Step * value